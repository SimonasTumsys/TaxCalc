#:kivy 2.0.0
#:import utils kivy.utils
#:import Factory kivy.factory.Factory
#:import NoTransition kivy.uix.screenmanager.NoTransition

WindowManager:
    transition: NoTransition()
    MainWindow:
    CalcWindow:
    EarnWindow:
    StatWindow:
    SettWindow:

<MainWindow>:
    ## App's background color
    canvas.before:
        Color:
            rgba: utils.get_color_from_hex(app.colors['bg_main']) ## Background grey

        Rectangle:
            pos: self.pos
            size: self.size

    name: "main"
    size: root.size

    ##Main window layout:

    FloatLayout:
        Image: ##App banner
            id: 'main_banner'
            source: 'app-banner2.png'
            size: self.texture_size
            pos_hint: {'center_x':0.3, 'center_y': 0.825}
            size_hint: (0.5, 0.5)

        BoxLayout: #Button container with layout, size and spacing
            spacing: 10
            orientation: "vertical"
            size_hint: 0.80, 0.5
            pos_hint: {'center_x': .5, 'center_y': .4}

        ##Main window buttons:

            StrokeButton: ##Calculator button 
                font_size: (root.width + root.height) / 30
                text: app.lang_data[0]['calc']
                font_name: 'DejaVuSans'
                on_release:
                    app.root.current = "calc"

            StrokeButton: ##Enter earnings button
                font_size: (root.width + root.height) / 30
                text: app.lang_data[0]['enter_earn']
                font_name: 'DejaVuSans'
                on_release:
                    app.root.current = "earn"

            
            StrokeButton: ##Statistics button
                font_size: (root.width + root.height) / 30
                text: app.lang_data[0]['stats']
                font_name: 'DejaVuSans'
                
            StrokeButton: ##Settings button
                font_size: (root.width + root.height) / 30
                text: app.lang_data[0]['sett']
                font_name: 'DejaVuSans'
                on_release:
                    app.root.current = 'sett'


<CalcWindow>:
    name: "calc"

    canvas.before:
        Color:
            rgba: utils.get_color_from_hex(app.colors['bg_main'])
        Rectangle:
            pos: self.pos
            size: self.size

    GridLayout:
        size_hint: 0.85, 0.5
        pos_hint: {'center_x': .5, 'center_y': .65}
        cols: 1
        spacing: [0,10]
        
        TextInput:
            pos_hint: {'center_x': .5, 'center_y': .85}
            size_hint: 0.4, 0.2
            id: total_earnings
            multiline: False
            font_size: (root.width + root.height) / 55
            hint_text: app.lang_data[1]['input_ph']
            hint_text_color: app.colors['hint_text']
            input_filter: 'float'

        TextInput:
            id: costs
            size_hint_y: 0.2
            height: 0
            background_color: 1,1,1,1
            multiline: False
            font_size: (root.width + root.height) / 55
            hint_text: app.lang_data[1]['cost_ph'] if app.settings['spend_30_percent'] == False else app.lang_data[1]['auto_cost']
            hint_text_color: app.colors['hint_text']
            input_filter: 'float'
            disabled: True if app.settings['spend_30_percent'] == True else False

        
        GridLayout:
            cols: 2
            spacing: [30,100]
            row_force_default: True
            row_default_height: self.height*0.2
            StrokeButton:
                font_size: (root.width + root.height) / 35
                text: app.lang_data[1]['submit']
                on_release:
                    root.ids.calc_container.clear_widgets() 
                    root.add_calcLayoutWidget() if root.ids.total_earnings.text != '' else root.useless()
                    root.ids.total_earnings.text = ''
                    root.ids.costs.text = ''


            StrokeButton:
                font_size: (root.width + root.height) / 35
                text: app.lang_data[1]['back']
                on_release:
                    root.ids.total_earnings.text = ''
                    root.ids.calc_container.clear_widgets()
                    app.root.current = "main"
                    

    BoxLayout:
        orientation: 'vertical'
        size_hint: 0.8, 0.5
        pos_hint: {'center_x': .5, 'center_y': .35}
        id: calc_container


               
<EarnWindow>:
    name: "earn"
    
    canvas.before:
        Color:
            rgba: utils.get_color_from_hex(app.colors['bg_main'])
        Rectangle:
            pos: self.pos
            size: self.size

    GridLayout:
        size_hint: 0.85, 0.5
        pos_hint: {'center_x': .5, 'center_y': .65}
        cols: 1
        spacing: [0,10]

        FileManager:


<FileManager>:
    BoxLayout:
        orientation: 'vertical'

        MDToolbar:
            title: "MDFileManager"
            left_action_items: [['menu', lambda x: None]]
            elevation: 10

        MDFloatLayout:

            MDRoundFlatIconButton:
                text: "Open manager"
                icon: "folder"
                pos_hint: {'center_x': .5, 'center_y': .6}
                on_release: root.file_manager_open()


<StatWindow>:
    name: "stat"

<SettWindow>:
    name: "sett"

    canvas.before:
        Color:
            rgba: utils.get_color_from_hex(app.colors['bg_main'])
        Rectangle:
            pos: self.pos
            size: self.size

    ##Main layout
    BoxLayout:
        orientation: 'vertical'
        spacing: 10
        
        ##Language setting layout
        BoxLayout:
            orientation: 'horizontal'
            spacing: 5
            padding: [0,0,30,0]

            ##Language setting label and button
            SettingsLabel:
                text: app.lang_data[4]['lang']
            BoxLayout:
                orientation: 'horizontal'
                spacing: 5
                SettingsToggleButton:
                    id: lng_button_lt
                    text: 'Lietuvi≈≥'
                    group: 'lng'
                    state: 'down' if app.settings['language'] == 'lt' else 'normal'
                    
                SettingsToggleButton:
                    id: lng_button_en
                    text: 'English'
                    group: 'lng'
                    state: 'down' if app.settings['language'] == 'en' else 'normal'

        Separator:

        ##PSD setting layout
        BoxLayout:
            orientation: 'horizontal'
            spacing: 5
            padding: [0,0,30,0]

            SettingsLabel:
                text: app.lang_data[4]['fixed_psd']
            BoxLayout:
                orientation: 'horizontal'
                spacing: 5
                SettingsToggleButton:
                    id: psd_button_true
                    text: app.lang_data[4]['yes']
                    group: 'psd'
                    state: 'down' if app.settings['psd_fixed'] == True else 'normal'
                SettingsToggleButton:
                    id: psd_button_false
                    text: app.lang_data[4]['no']
                    group: 'psd'
                    state: 'down' if app.settings['psd_fixed'] == False else 'normal'

        Separator:

        ##Spending setting layout
        BoxLayout:
            orientation: 'horizontal'
            spacing: 5
            padding: [0,0,30,0]

            ##Spending setting label and button
            SettingsLabel:
                text: app.lang_data[4]['spend_30']
                halign: 'center'
            BoxLayout:
                orientation: 'horizontal'
                spacing: 5
                SettingsToggleButton:
                    id: spend_button_true
                    text: app.lang_data[4]['yes']
                    group: 'spend'
                    state: 'down' if app.settings['spend_30_percent'] == True else 'normal'
                SettingsToggleButton:
                    id: spend_button_false
                    text: app.lang_data[4]['no']
                    group: 'spend'
                    state: 'down' if app.settings['spend_30_percent'] == False else 'normal'


        Separator:

        ##Pension setting layout
        BoxLayout:
            orientation: 'horizontal'
            spacing: 5
            padding: [0,0,30,0]

            ##Pension setting label and button
            SettingsLabel:
                text: app.lang_data[4]['pension']
            BoxLayout:
                orientation: 'horizontal'
                spacing: 5
                SettingsToggleButton:
                    id: pension0
                    text: '0'
                    group: 'pension'
                    state: 'down' if app.settings['pension'] == 0 else 'normal'
                SettingsToggleButton:
                    id: pension27
                    text: '2.7%'
                    group: 'pension'
                    state: 'down' if app.settings['pension'] == 2.7 else 'normal'
                SettingsToggleButton:
                    id: pension3
                    text: '3%'
                    group: 'pension'
                    state: 'down' if app.settings['pension'] == 3 else 'normal'
                    
        Separator:

        GridLayout:
            cols: 2
            spacing: [30,100]
            row_force_default: True
            row_default_height: self.height*0.5
            padding: 30
            StrokeButton:
                font_size: (root.width + root.height) / 35
                text: app.lang_data[4]['save']
                on_release:
                    Factory.TakeEffectPopup().open()

            StrokeButton:
                font_size: (root.width + root.height) / 35
                text: app.lang_data[4]['cancel']
                on_release: 
                    app.root.current = "main"
    

    HelpButton:
        pos_hint: {'x':0.013, 'y':0.775}
        id: psd_help_button
        on_release: Factory.PSDHelpPopup().open()

    HelpButton:
        pos_hint: {'x':0.013, 'y':0.57}
        id: spending_help_button
        on_release: Factory.SpendHelpPopup().open()

    HelpButton:
        pos_hint: {'x':0.013, 'y':0.364}
        id: pension_help_button
        on_release: Factory.PensionHelpPopup().open()


<Separator@Widget>:
    id: separator
    size_hint_y: None
    height: 6
    canvas:
        Color:
            rgb: 0., 0., 0.
        Rectangle:
            pos: 0, separator.center_y
            size: separator.width, 2

<StyledButton@Button>:
    background_color: (0,0,0,0)
    background_normal: ''
    back_color: utils.get_color_from_hex(app.colors['btn_bg']) ## Grey
    back_color_press: utils.get_color_from_hex(app.colors['btn_side']) ## Black
    font_color_press: utils.get_color_from_hex(app.colors['font']) ## Font Grey
    ##Font color:
    color: self.back_color_press if self.state == 'normal' else self.font_color_press

<StrokeButton@StyledButton>:
    border_radius: 25
    canvas.before:
    ##Color when pressed and not pressed:
        Color:
            rgba: self.back_color or [0,0,0,0] if self.state == 'normal' else self.back_color_press or [0,0,0,0] 
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [25]
    ##Line around button:
    canvas.after:
        Color:
            rgba: self.back_color_press or [0,0,0,0]
        Line:  
            rounded_rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1], self.border_radius)
            width: 2

<SettingsToggleButton@ToggleButton>:
    font_size: (root.width + root.height) / 8
    background_color: (0,0,0,0)
    background_normal: ''
    back_color: utils.get_color_from_hex(app.colors['btn_bg']) ## Grey
    back_color_press: utils.get_color_from_hex(app.colors['btn_side']) ## Black
    font_color_press: utils.get_color_from_hex(app.colors['font']) ## Font Grey
    size_hint: (0.25, 0.5)
    pos_hint: {'center_x': 0.5, 'center_y': 0.5}
    allow_no_selection: False
    ##Font color when pressed and not pressed
    color: self.back_color_press if self.state == 'normal' else self.font_color_press
    ##Color when pressed and not pressed
    canvas.before:
        Color:
            rgba: self.back_color or [0,0,0,0] if self.state == 'normal' else self.back_color_press or [0,0,0,0] 
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [15]

<HelpButton@StyledButton>:
    size_hint: (0.05, 0.025)
    font_size: (root.width + root.height) / 3
    color: self.back_color_press if self.state == 'down' else self.font_color_press
    text: '?'
    canvas.before:
        Color:
            rgba: self.back_color or [0,0,0,0] if self.state == 'down' else self.back_color_press or [0,0,0,0] 
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [5]

<HelpPopup@Popup>:
    size_hint: (0.8, 0.6)
    pos_hint: {'center_x': 0.5, 'center_y': 0.6}
    separator_color: utils.get_color_from_hex(app.colors['font']) ## Font Grey
    separator_height: '1dp'
    title_color: utils.get_color_from_hex(app.colors['font']) ## Font Grey
    title_align: 'center'
    title_size: (root.width + root.height) / 32
    #background_color: utils.get_color_from_hex('#242725')

<PSDHelpPopup@HelpPopup>:
    title: app.lang_data[4]['fixed_psd']
    BoxLayout:
        orientation: 'vertical'
        PopupLabel:
            text: app.lang_data[4]['psd_help']

<SpendHelpPopup@HelpPopup>:
    title: app.lang_data[4]['spend_30']
    BoxLayout:
        orientation: 'vertical'
        PopupLabel:
            text: app.lang_data[4]['spend_help']


<PensionHelpPopup@HelpPopup>:
    title: app.lang_data[4]['pension']
    BoxLayout:
        orientation: 'vertical'
        PopupLabel:
            text: app.lang_data[4]['pension_help']

<TakeEffectPopup@Popup>:
    size_hint: (0.8, 0.25)
    pos_hint: {'center_x': 0.5, 'center_y': 0.6}
    title: ''
    separator_height: 0
    #background_color: utils.get_color_from_hex('#242725')
    auto_dismiss: False
    BoxLayout:
        orientation: 'vertical'
        Label:
            text: app.lang_data[4]['take_effect']
            font_size: (root.width + root.height) / 35
            color: utils.get_color_from_hex(app.colors['font'])
            valign: 'middle'
            halign: 'center'
            text_size: self.size
        BoxLayout:
            orientation: 'horizontal'
            spacing: 30
            StrokeButton: ##Save and quit button
                font_size: (root.width + root.height) / 35
                text: app.lang_data[4]['save_quit']
                font_name: 'DejaVuSans'
                size_hint: (1, 0.6)
                on_release:
                    app.root.get_screen('sett').save_settings()
                    app.stop()
            StrokeButton: ##Cancel button
                font_size: (root.width + root.height) / 35
                text: app.lang_data[4]['cancel']
                font_name: 'DejaVuSans'
                size_hint: (1, 0.6)
                on_release:
                    root.dismiss()


<PopupLabel@Label>:
    valign: 'middle'
    halign: 'center'
    font_size: (root.width + root.height) / 45
    text_size: self.size
    color: utils.get_color_from_hex(app.colors['font'])

<SettingsLabel@Label>:
    font_size: (root.width + root.height) / 13
    color: utils.get_color_from_hex(app.colors['btn_side'])
    halign: 'center'

<DataButton@StyledButton>:
    canvas.before:
        Color:
            rgba: self.back_color or [0,0,0,0] if self.state == 'normal' else self.back_color_press or [0,0,0,0] 
        Rectangle:
            size: self.size
            pos: self.pos
    ##Line around button:
    canvas.after:
        Color:
            rgba: self.back_color_press or [0,0,0,0]
        Line:  
            rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1])

<CalculatedLayout>:
    pos: self.pos
    rows: 10
    cols: 2
    DataButton:
        text: app.lang_data[1]['income']
    DataButton:
        text:
            app.root.get_screen('calc').calculate()[0]
    DataButton:
        text: app.lang_data[1]['profit']
    DataButton:
        text:
            app.root.get_screen('calc').calculate()[1]
    DataButton:
        text: app.lang_data[1]['costs']
    DataButton:
        text:
            app.root.get_screen('calc').calculate()[2]
    DataButton:
        text: app.lang_data[1]['psd']
    DataButton:
        text:
            app.root.get_screen('calc').calculate()[3]
    DataButton:
        text: app.lang_data[1]['vsd']
    DataButton:
        text:
            app.root.get_screen('calc').calculate()[4]
    DataButton:
        text: app.lang_data[1]['pension']
    DataButton:
        text:
            app.root.get_screen('calc').calculate()[5]
    DataButton:
        text: app.lang_data[1]['gpm']
    DataButton:
        text:
            app.root.get_screen('calc').calculate()[6]
    DataButton:
        text: app.lang_data[1]['net_earn']
    DataButton:
        text:
            app.root.get_screen('calc').calculate()[7]
    DataButton:
        text: app.lang_data[1]['total_tax']
    DataButton:
        text:
            app.root.get_screen('calc').calculate()[8]
    DataButton:
        text: app.lang_data[1]['tax_perc']
    DataButton:
        text:
            app.root.get_screen('calc').calculate()[9]